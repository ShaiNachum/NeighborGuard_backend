// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/meeting": {
            "post": {
                "description": "Create a new meeting between a volunteer and a recipient",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meeting"
                ],
                "summary": "Create a new meeting",
                "parameters": [
                    {
                        "description": "Meeting to create",
                        "name": "meeting",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.NewMeeting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.Meeting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/meeting/{id}": {
            "delete": {
                "description": "Cancel a meeting and update recipient's status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meeting"
                ],
                "summary": "Cancel an existing meeting",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meeting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/meeting/{id}/status": {
            "put": {
                "description": "Update the status of an existing meeting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meeting"
                ],
                "summary": "Update meeting status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Meeting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New meeting status (IS_PICKED or DONE)",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.Meeting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/meetings": {
            "get": {
                "description": "Get meetings filtered by user ID (recipient or volunteer) and meeting status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "meetings"
                ],
                "summary": "Get meetings based on filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to filter meetings (can be recipient or volunteer)",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Meeting status to filter (IS_PICKED or DONE)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/services.Meeting"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object that needs to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.NewUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user/{email}": {
            "get": {
                "description": "Get a single user by their email address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email to filter users",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Role to filter users",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by latitude",
                        "name": "filterByLat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by longitude",
                        "name": "filterByLon",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Is required assistance",
                        "name": "isRequiredAssistance",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SearchUsersResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/recipients": {
            "get": {
                "description": "Get recipients who need assistance matching volunteer's languages and services",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get nearby recipients needing assistance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Volunteer's UID",
                        "name": "volunteerUID",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Filter by latitude",
                        "name": "filterByLat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by longitude",
                        "name": "filterByLon",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/schemas.SearchUsersResponseSchema"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{uid}": {
            "put": {
                "description": "Update an existing user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/services.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "schemas.SearchUsersResponseSchema": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/services.User"
                    }
                }
            }
        },
        "services.Address": {
            "type": "object",
            "properties": {
                "apartmentNumber": {
                    "type": "integer"
                },
                "city": {
                    "type": "string"
                },
                "houseNumber": {
                    "type": "integer"
                },
                "street": {
                    "type": "string"
                }
            }
        },
        "services.AssistanceStatus": {
            "type": "string",
            "enum": [
                "DO_NOT_NEED_ASSISTANCE",
                "NEED_ASSISTANCE",
                "IN_PROGRESS"
            ],
            "x-enum-varnames": [
                "DoNotNeedAssistance",
                "NeedAssistance",
                "InProgress"
            ]
        },
        "services.Gender": {
            "type": "string",
            "enum": [
                "MALE",
                "FEMALE"
            ],
            "x-enum-varnames": [
                "Male",
                "Female"
            ]
        },
        "services.LonLat": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "services.Meeting": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "date": {
                    "type": "integer"
                },
                "meetingStatus": {
                    "$ref": "#/definitions/services.MeetingStatus"
                },
                "recipient": {
                    "$ref": "#/definitions/services.User"
                },
                "uid": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "volunteer": {
                    "$ref": "#/definitions/services.User"
                }
            }
        },
        "services.MeetingStatus": {
            "type": "string",
            "enum": [
                "IS_PICKED",
                "DONE"
            ],
            "x-enum-varnames": [
                "IsPicked",
                "Done"
            ]
        },
        "services.NewMeeting": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "integer"
                },
                "meetingStatus": {
                    "$ref": "#/definitions/services.MeetingStatus"
                },
                "recipient": {
                    "$ref": "#/definitions/services.User"
                },
                "volunteer": {
                    "$ref": "#/definitions/services.User"
                }
            }
        },
        "services.NewUser": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/services.Address"
                },
                "age": {
                    "type": "integer"
                },
                "assistanceStatus": {
                    "$ref": "#/definitions/services.AssistanceStatus"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/services.Gender"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lastName": {
                    "type": "string"
                },
                "lastOK": {
                    "type": "integer"
                },
                "lonLat": {
                    "$ref": "#/definitions/services.LonLat"
                },
                "password": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "profileImage": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/services.Role"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "services.Role": {
            "type": "string",
            "enum": [
                "VOLUNTEER",
                "RECIPIENT"
            ],
            "x-enum-varnames": [
                "Volunteer",
                "Recipient"
            ]
        },
        "services.User": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/services.Address"
                },
                "age": {
                    "type": "integer"
                },
                "assistanceStatus": {
                    "$ref": "#/definitions/services.AssistanceStatus"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "$ref": "#/definitions/services.Gender"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "lastName": {
                    "type": "string"
                },
                "lastOK": {
                    "type": "integer"
                },
                "lonLat": {
                    "$ref": "#/definitions/services.LonLat"
                },
                "password": {
                    "type": "string"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "profileImage": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/services.Role"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uid": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "NeighborGuard API",
	Description:      "This is the NeighborGuard API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
